// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransitiveClosureTable.Infrastructure.Data;

#nullable disable

namespace TransitiveClosureTable.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250905090717_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransitiveClosureTable.Domain.Entities.ExceptionJournal", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventId"));

                    b.Property<string>("BodyParams")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("QueryParams")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("ExceptionJournals");
                });

            modelBuilder.Entity("TransitiveClosureTable.Domain.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnOrder(2);

                    b.Property<int>("TreeId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("TreeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("TransitiveClosureTable.Domain.Entities.TransitiveClosure", b =>
                {
                    b.Property<int>("AncestorId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("DescendantId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Depth")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("TreeId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("AncestorId", "DescendantId");

                    b.HasIndex("AncestorId");

                    b.HasIndex("DescendantId");

                    b.HasIndex("TreeId");

                    b.ToTable("TransitiveClosures");
                });

            modelBuilder.Entity("TransitiveClosureTable.Domain.Entities.Tree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Trees");
                });

            modelBuilder.Entity("TransitiveClosureTable.Domain.Entities.Node", b =>
                {
                    b.HasOne("TransitiveClosureTable.Domain.Entities.Tree", "Tree")
                        .WithMany("Nodes")
                        .HasForeignKey("TreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("TransitiveClosureTable.Domain.Entities.TransitiveClosure", b =>
                {
                    b.HasOne("TransitiveClosureTable.Domain.Entities.Node", "Ancestor")
                        .WithMany()
                        .HasForeignKey("AncestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransitiveClosureTable.Domain.Entities.Node", "Descendant")
                        .WithMany()
                        .HasForeignKey("DescendantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransitiveClosureTable.Domain.Entities.Tree", "Tree")
                        .WithMany("TransitiveClosures")
                        .HasForeignKey("TreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ancestor");

                    b.Navigation("Descendant");

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("TransitiveClosureTable.Domain.Entities.Tree", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("TransitiveClosures");
                });
#pragma warning restore 612, 618
        }
    }
}
